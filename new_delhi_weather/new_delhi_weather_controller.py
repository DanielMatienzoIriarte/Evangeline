from PyQt6.QtCore import QObject
from matplotlib.figure import Figure

from new_delhi_weather.new_delhi_weather_model import NewDelhiWeather as Model
from new_delhi_weather.new_delhi_weather_view import NewDelhiWeather as View


class NewDelhiWeather(QObject):
    def __init__(self, model: Model, view: View):
        super().__init__()
        self._model: Model = model
        self._view: View = view

        """self._forecaster_model = Prophet()
        self._forecast_data = self._model.new_delhi_climate_data
        self._forecaster_model.fit(self._forecast_data)
        self._forecasts = self._forecaster_model.make_future_dataframe(periods=365)
        self._predictions = self._forecaster_model.predict(self._forecasts)
        self._figure = plot_plotly(self._forecaster_model, self._predictions)

        self._initial_figure = self._forecaster_model.plot(self._predictions)
        self._initial_figure_components = self._forecaster_model.plot_components(self._predictions)
        self._initial_figure.gca().set_title('New Delhi Weather Forecast')
        self._initial_figure.gca().set_xlabel('Date')"""

        # Connect view signals to controller slots
        self._view.update_button.clicked.connect(self.update_model_from_view)

        # Connect model signals to view slots
        self._model.data_changed.connect(self._view.set_data_display)
        # self._model.data_updated.connect()

        # Initialize view with current model data
        self._view.set_data_display(self._model.data)
        self._view.set_weather_data(self.get_forecast_figure)

    def update_model_from_view(self):
        new_data: str = self._view.get_input_data()
        self._model.data = new_data

# todo update prediction with data entered in view
    def update_model(self) ->None:
        self._model.data = '666'

    """
    Generates a Figure which will be passed to the View.
    Returns the Matplotlib Figure object generated by Prophet.
    """
    @property
    def get_forecast_figure(self) -> Figure:
        # if self.forecast_data is not None:
        figure = self._model.forecaster_model.plot(self._model.perform_forecast())
        #figure.show()
        # self.figure_components = self._forecaster_model.plot_components(self.predictions)
        figure.gca().set_title('New Delhi Weather Forecast')
        figure.gca().set_xlabel('Date')
        figure.gca().set_ylabel('Value')

        return figure

    # return None