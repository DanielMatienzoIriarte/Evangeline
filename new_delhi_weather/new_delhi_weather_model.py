from PyQt6.QtCore import QObject, pyqtSignal
import pandas as pd
from pandas import DataFrame
from prophet import Prophet
from matplotlib.figure import Figure


class NewDelhiWeather(QObject):
    data_changed = pyqtSignal(str)
    data_updated = pyqtSignal(DataFrame)

    def __init__(self, initial_data: str = ""):
        super().__init__()

        self._new_delhi_climate_data = pd.read_csv("Resources/Data/DailyDelhiClimateTrain.csv")
        self._data: str = initial_data
        self._forecaster_model = Prophet()
        self.forecast_data = None
        self.predictions = None
        self.forecasts = None
        self.figure_components = None
        self.figure = None

    @property
    def data(self) -> str:
        return self._data

    @data.setter
    def data(self, value: str):
        if self._data != value:
            self._data = value
            self.data_changed.emit(self._data)

    @property
    def new_delhi_climate_data(self) -> DataFrame:
        return self._new_delhi_climate_data

    @new_delhi_climate_data.setter
    def new_delhi_climate_data(self, value):
        self._new_delhi_climate_data = value
        self.data_updated.emit(self._new_delhi_climate_data)

    @property
    def forecaster_model(self):
        return self._forecaster_model

    """
    Fits the model and generates a forecast.
    Returns the forecast dataframe.
    """
    def perform_forecast(self, periods=3285) -> DataFrame:
        self.new_delhi_climate_data = self.new_delhi_climate_data.rename(columns={"date": "ds", "meantemp": "y"})
        self._forecaster_model.fit(self.new_delhi_climate_data)
        self.forecasts = self._forecaster_model.make_future_dataframe(periods=periods)
        self.forecast_data = self._forecaster_model.predict(self.forecasts)

        #
        # return self._forecaster_model.plot(self._forecaster_model)

        return self.forecast_data

    """
    Generates a Figure which will be passed to the View.
    Returns the Matplotlib Figure object generated by Prophet.
    """
    @property
    def get_forecast_figure(self) -> Figure:
        # if self.forecast_data is not None:
            self.figure = self._forecaster_model.plot(self.perform_forecast())
            # self.figure_components = self._forecaster_model.plot_components(self.predictions)
            self.figure.gca().set_title('New Delhi Weather Forecast')
            self.figure.gca().set_xlabel('Date')
            self.figure.gca().set_ylabel('Value')

            return self.figure

        # return None